{
  "type":"nomad_meta_info_1_0",
  "name":"stats",
  "description":"meta info describing statistics, i.e. collected info",
  "dependencies":[{
    "relativePath":"common.nomadmetainfo.json"
  },{
    "relativePath":"public.nomadmetainfo.json"
  }],
  "metaInfos":[{
    "name":"section_stats",
    "kindStr":"type_section",
    "description":"statistics on the calculation data either of a calculation or a group of calculations. All the values here should be collectable by merging various section_stats, to build a common section_stats. Reference to the single entries should normally be avoided. Try to keep the size of this limited, the goal should be that one could cache this in memory.",
    "superNames":[]
  },{
    "name":"section_stats_per_atom",
    "kindStr":"type_section",
    "description":"stats by atom number",
    "superNames":["section_stats"]
  },{
    "name":"section_stats_per_composition",
    "kindStr":"type_section",
    "description":"stats by unreduced composition",
    "superNames":["section_stats"]
  },{
    "name":"section_stats_per_electronic_structure_method",
    "kindStr":"type_section",
    "description":"stats by electronic structure value",
    "superNames":["section_stats"]
  },{
    "name":"section_stats_per_geometry",
    "kindStr":"type_section",
    "description":"unique geometry ids and related statistics",
    "superNames":["section_stats_per_composition"]
  },{
    "name":"section_stats_per_meta_info",
    "kindStr":"type_section",
    "description":"statistics per meta info",
    "superNames":["section_stats"]
  },{
    "name":"section_stats_per_parser",
    "kindStr":"type_section",
    "description":"statistics per parser",
    "superNames":["section_stats"]
  },{
    "name":"section_stats_values",
    "kindStr":"type_section",
    "description":"unique values for selected meta infos",
    "superNames":["section_stats"]
  },{
    "name":"stats_meta_count",
    "description":"length of meta info",
    "superNames":["section_stats"],
    "dtypeStr":"i64",
    "repeats":true
  },{
    "name":"stats_meta_present",
    "description":"meta infos contained in this calculation",
    "superNames":["section_stats"],
    "dtypeStr":"C",
    "repeats":true
  },{
    "name":"stats_per_atom_atom_number",
    "description":"atom number of an atom present in the calculations, 0 is an undefined atom X",
    "superNames":["section_stats_per_atom"],
    "dtypeStr":"i"
  },{
    "name":"stats_per_composition_composition_formula",
    "description":"Chemical formula of the composition using chemical atom names in alphabetic order and the amount in the simulation cell if not 1.",
    "superNames":["section_stats_per_composition"],
    "dtypeStr":"C"
  },{
    "name":"stats_per_composition_n_geometries",
    "description":"number of geometries (as defined by stats_per_geometry_geometry_id) with the current composition",
    "superNames":["section_stats_per_composition"],
    "dtypeStr":"i64"
  },{
    "name":"stats_per_composition_n_single_configuration_calculations",
    "description":"number of section_single_configuration_calculation with the current composition",
    "superNames":["section_stats_per_composition"],
    "dtypeStr":"i64"
  },{
    "name":"stats_per_electronic_structure_method_value",
    "description":"value of the electronic structure method",
    "superNames":["section_stats_per_electronic_structure_method"],
    "dtypeStr":"C"
  },{
    "name":"stats_per_geometry_geometry_id",
    "description":"geometry id, a checksum calculated using cell, atom position, and labels. This finds geometries that are trivially equivalent, geometries that are effectively equivalent might still have different ids.",
    "superNames":["section_stats_per_geometry"],
    "dtypeStr":"i64"
  },{
    "name":"stats_per_geometry_n_single_configuration_calculations",
    "description":"number of section_single_configuration_calculation that have the current geometry",
    "superNames":["section_stats_per_geometry"],
    "dtypeStr":"i64"
  },{
    "name":"stats_per_meta_info_n_values",
    "description":"number of values of that meta info",
    "superNames":["section_stats_per_parser"],
    "dtypeStr":"i64"
  },{
    "name":"stats_per_meta_info_name",
    "description":"name of the meta info",
    "superNames":["section_stats_per_parser"],
    "dtypeStr":"C"
  },{
    "name":"stats_per_parser_n_assigned",
    "description":"number of main files assigned to this parser",
    "superNames":["section_stats_per_parser"],
    "dtypeStr":"i64"
  },{
    "name":"stats_per_parser_n_failed",
    "description":"number of main files that failed to be parsed",
    "superNames":["section_stats_per_parser"],
    "dtypeStr":"i64"
  },{
    "name":"stats_per_parser_n_parsed",
    "description":"number of main files sucessfully parsed",
    "superNames":["section_stats_per_parser"],
    "dtypeStr":"i64"
  },{
    "name":"stats_per_parser_parser_id",
    "description":"Parser id of the current parser",
    "superNames":["section_stats_per_parser"],
    "dtypeStr":"C"
  },{
    "name":"stats_values_meta_name",
    "description":"meta info whose values are cached here",
    "superNames":["section_stats_values"],
    "dtypeStr":"C"
  },{
    "name":"stats_values_string_values",
    "description":"unique string values for the meta info cached here",
    "superNames":["section_stats_values"],
    "dtypeStr":"C",
    "repeats":true
  }]
}
